From 90db7a53e702ee931b696e1ab24e8c3a72a3584c Mon Sep 17 00:00:00 2001
From: Mark Stemm <mark.stemm@sysdig.com>
Date: Thu, 25 May 2017 13:28:25 -0700
Subject: [PATCH] Use strtok_r instead of strtok. (#850)

Ensures thread safety.
---
 userspace/libscap/scap_fds.c   | 40 ++++++++++++++++++++++------------------
 userspace/libscap/scap_procs.c |  9 +++++----
 2 files changed, 27 insertions(+), 22 deletions(-)

diff --git a/userspace/libscap/scap_fds.c b/userspace/libscap/scap_fds.c
index 516e06568..d227f2f11 100644
--- a/userspace/libscap/scap_fds.c
+++ b/userspace/libscap/scap_fds.c
@@ -750,6 +750,8 @@ int32_t scap_fd_read_unix_sockets_from_proc_fs(scap_t *handle, const char* filen
 	}
 	while(NULL != fgets(line, sizeof(line), f))
 	{
+		char *scratch;
+
 		// skip the first line ... contains field names
 		if(!first_line)
 		{
@@ -764,7 +766,7 @@ int32_t scap_fd_read_unix_sockets_from_proc_fs(scap_t *handle, const char* filen
 		// parse the fields
 		//
 		// 1. Num
-		token = strtok(line, delimiters);
+		token = strtok_r(line, delimiters, &scratch);
 		if(token == NULL)
 		{
 			ASSERT(false);
@@ -776,7 +778,7 @@ int32_t scap_fd_read_unix_sockets_from_proc_fs(scap_t *handle, const char* filen
 		fdinfo->info.unix_socket_info.destination = 0;
 
 		// 2. RefCount
-		token = strtok(NULL, delimiters);
+		token = strtok_r(NULL, delimiters, &scratch);
 		if(token == NULL)
 		{
 			ASSERT(false);
@@ -785,7 +787,7 @@ int32_t scap_fd_read_unix_sockets_from_proc_fs(scap_t *handle, const char* filen
 		}
 
 		// 3. Protocol
-		token = strtok(NULL, delimiters);
+		token = strtok_r(NULL, delimiters, &scratch);
 		if(token == NULL)
 		{
 			ASSERT(false);
@@ -794,7 +796,7 @@ int32_t scap_fd_read_unix_sockets_from_proc_fs(scap_t *handle, const char* filen
 		}
 
 		// 4. Flags
-		token = strtok(NULL, delimiters);
+		token = strtok_r(NULL, delimiters, &scratch);
 		if(token == NULL)
 		{
 			ASSERT(false);
@@ -803,7 +805,7 @@ int32_t scap_fd_read_unix_sockets_from_proc_fs(scap_t *handle, const char* filen
 		}
 
 		// 5. Type
-		token = strtok(NULL, delimiters);
+		token = strtok_r(NULL, delimiters, &scratch);
 		if(token == NULL)
 		{
 			ASSERT(false);
@@ -812,7 +814,7 @@ int32_t scap_fd_read_unix_sockets_from_proc_fs(scap_t *handle, const char* filen
 		}
 
 		// 6. St
-		token = strtok(NULL, delimiters);
+		token = strtok_r(NULL, delimiters, &scratch);
 		if(token == NULL)
 		{
 			ASSERT(false);
@@ -821,7 +823,7 @@ int32_t scap_fd_read_unix_sockets_from_proc_fs(scap_t *handle, const char* filen
 		}
 		
 		// 7. Inode
-		token = strtok(NULL, delimiters);
+		token = strtok_r(NULL, delimiters, &scratch);
 		if(token == NULL)
 		{
 			ASSERT(false);
@@ -832,7 +834,7 @@ int32_t scap_fd_read_unix_sockets_from_proc_fs(scap_t *handle, const char* filen
 		sscanf(token, "%"PRIu64, &(fdinfo->ino));
 
 		// 8. Path
-		token = strtok(NULL, delimiters);
+		token = strtok_r(NULL, delimiters, &scratch);
 		if(NULL != token)
 		{
 			strncpy(fdinfo->info.unix_socket_info.fname, token, SCAP_MAX_PATH_SIZE);
@@ -873,6 +875,8 @@ int32_t scap_fd_read_netlink_sockets_from_proc_fs(scap_t *handle, const char* fi
 	}
 	while(NULL != fgets(line, sizeof(line), f))
 	{
+		char *scratch;
+
 		// skip the first line ... contains field names
 		if(!first_line)
 		{
@@ -888,7 +892,7 @@ int32_t scap_fd_read_netlink_sockets_from_proc_fs(scap_t *handle, const char* fi
 		// parse the fields
 		//
 		// 1. Num
-		token = strtok(line, delimiters);
+		token = strtok_r(line, delimiters, &scratch);
 		if(token == NULL)
 		{
 			ASSERT(false);
@@ -897,7 +901,7 @@ int32_t scap_fd_read_netlink_sockets_from_proc_fs(scap_t *handle, const char* fi
 		}
 
 		// 2. Eth
-		token = strtok(NULL, delimiters);
+		token = strtok_r(NULL, delimiters, &scratch);
 		if(token == NULL)
 		{
 			ASSERT(false);
@@ -906,7 +910,7 @@ int32_t scap_fd_read_netlink_sockets_from_proc_fs(scap_t *handle, const char* fi
 		}
 
 		// 3. Pid
-		token = strtok(NULL, delimiters);
+		token = strtok_r(NULL, delimiters, &scratch);
 		if(token == NULL)
 		{
 			ASSERT(false);
@@ -915,7 +919,7 @@ int32_t scap_fd_read_netlink_sockets_from_proc_fs(scap_t *handle, const char* fi
 		}
 
 		// 4. Groups
-		token = strtok(NULL, delimiters);
+		token = strtok_r(NULL, delimiters, &scratch);
 		if(token == NULL)
 		{
 			ASSERT(false);
@@ -924,7 +928,7 @@ int32_t scap_fd_read_netlink_sockets_from_proc_fs(scap_t *handle, const char* fi
 		}
 
 		// 5. Rmem
-		token = strtok(NULL, delimiters);
+		token = strtok_r(NULL, delimiters, &scratch);
 		if(token == NULL)
 		{
 			ASSERT(false);
@@ -933,7 +937,7 @@ int32_t scap_fd_read_netlink_sockets_from_proc_fs(scap_t *handle, const char* fi
 		}
 
 		// 6. Wmem
-		token = strtok(NULL, delimiters);
+		token = strtok_r(NULL, delimiters, &scratch);
 		if(token == NULL)
 		{
 			ASSERT(false);
@@ -942,7 +946,7 @@ int32_t scap_fd_read_netlink_sockets_from_proc_fs(scap_t *handle, const char* fi
 		}
 
 		// 7. Dump
-		token = strtok(NULL, delimiters);
+		token = strtok_r(NULL, delimiters, &scratch);
 		if(token == NULL)
 		{
 			ASSERT(false);
@@ -951,7 +955,7 @@ int32_t scap_fd_read_netlink_sockets_from_proc_fs(scap_t *handle, const char* fi
 		}
 
 		// 8. Locks
-		token = strtok(NULL, delimiters);
+		token = strtok_r(NULL, delimiters, &scratch);
 		if(token == NULL)
 		{
 			ASSERT(false);
@@ -960,7 +964,7 @@ int32_t scap_fd_read_netlink_sockets_from_proc_fs(scap_t *handle, const char* fi
 		}
 
 		// 9. Drops
-		token = strtok(NULL, delimiters);
+		token = strtok_r(NULL, delimiters, &scratch);
 		if(token == NULL)
 		{
 			ASSERT(false);
@@ -969,7 +973,7 @@ int32_t scap_fd_read_netlink_sockets_from_proc_fs(scap_t *handle, const char* fi
 		}
 
 		// 10. Inode
-		token = strtok(NULL, delimiters);
+		token = strtok_r(NULL, delimiters, &scratch);
 		if(token == NULL)
 		{
 			ASSERT(false);
diff --git a/userspace/libscap/scap_procs.c b/userspace/libscap/scap_procs.c
index 3c2ef81c1..fc8e5dcce 100644
--- a/userspace/libscap/scap_procs.c
+++ b/userspace/libscap/scap_procs.c
@@ -310,9 +310,10 @@ int32_t scap_proc_fill_cgroups(struct scap_threadinfo* tinfo, const char* procdi
 		char* token;
 		char* subsys_list;
 		char* cgroup;
+		char* scratch;
 
 		// id
-		token = strtok(line, ":");
+		token = strtok_r(line, ":", &scratch);
 		if(token == NULL)
 		{
 			ASSERT(false);
@@ -321,7 +322,7 @@ int32_t scap_proc_fill_cgroups(struct scap_threadinfo* tinfo, const char* procdi
 		}
 
 		// subsys
-		subsys_list = strtok(NULL, ":");
+		subsys_list = strtok_r(NULL, ":", &scratch);
 		if(subsys_list == NULL)
 		{
 			ASSERT(false);
@@ -346,7 +347,7 @@ int32_t scap_proc_fill_cgroups(struct scap_threadinfo* tinfo, const char* procdi
 		}
 
 		// cgroup
-		cgroup = strtok(NULL, ":");
+		cgroup = strtok_r(NULL, ":", &scratch);
 		if(cgroup == NULL)
 		{
 			ASSERT(false);
@@ -357,7 +358,7 @@ int32_t scap_proc_fill_cgroups(struct scap_threadinfo* tinfo, const char* procdi
 		// remove the \n
 		cgroup[strlen(cgroup) - 1] = 0;
 
-		while((token = strtok(subsys_list, ",")) != NULL)
+		while((token = strtok_r(subsys_list, ",", &scratch)) != NULL)
 		{
 			subsys_list = NULL;
 			if(strlen(cgroup) + 1 + strlen(token) + 1 > SCAP_MAX_CGROUPS_SIZE - tinfo->cgroups_len)
